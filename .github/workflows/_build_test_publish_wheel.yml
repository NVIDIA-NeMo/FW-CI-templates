# Copyright (c) 2020-2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Build, test, and publish a PyPi wheel

on:
  workflow_call:
    inputs:
      dry-run:
        required: false
        description: Upload to PyPy Test instance
        type: boolean
        default: true
      python-package:
        type: string
        description: Name of Python package
      python-version:
        type: string
        description: Python version
        default: 3.10
        required: false
      ref:
        required: false
        description: Ref (SHA or branch) to release
        type: string
        default: ${{ github.sha }}
    secrets:
      TWINE_USERNAME:
        required: true
      TWINE_PASSWORD:
        required: true
      SLACK_WEBHOOK_ADMIN:
        required: false
      SLACK_WEBHOOK:
        required: false
    outputs:
      version:
        description: NeMo library version
        value: ${{ jobs.build-wheel.outputs.expected-version }}
      pypi-name:
        description: NeMo library name on PyPi
        value: ${{ jobs.build-wheel.outputs.name }}

defaults:
  run:
    shell: bash -x -e -u -o pipefail {0}

jobs:
  build-wheel:
    runs-on: ubuntu-latest
    outputs:
      expected-version: ${{ steps.build.outputs.version }}
      name: ${{ steps.build.outputs.name }}
    env:
      PYPROJECT_NAME: ${{ inputs.python-package }}
      DRY_RUN: ${{ inputs.dry-run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.run_id }}
          ref: ${{ inputs.ref }}

      - name: Setup Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ inputs.python-version }}"

      - name: Build wheel
        id: build
        run: |
          cd ${{ github.run_id }}
          ls -al 

          if [[ "$DRY_RUN" == "true" ]]; then
            sed -i "/^PATCH/c\PATCH = $((RANDOM % 9000 + 1000))" $PYPROJECT_NAME/package_info.py 
          fi

          pip install .

          cmd=$(cat <<EOF
          import package_info

          with open("version.txt", "w") as fh:
            fh.write(package_info.__version__)
          with open("name.txt", "w") as fh:
            fh.write(package_info.__package_name__)
          EOF
          )

          pushd $PYPROJECT_NAME
          python -c "$cmd"
          popd

          EXPECTED_VERSION=$(cat version.txt)
          NAME=$(cat name.txt | tr '_' '-')

          echo "version=$EXPECTED_VERSION" | tee -a "$GITHUB_OUTPUT"
          echo "name=$NAME" | tee -a "$GITHUB_OUTPUT"

          python3 -m pip install --upgrade build 
          python3 -m build

          ls -al dist/

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: pip-wheel-${{ github.run_id }}
          path: ${{ github.run_id }}/dist/
          overwrite: true

  test-wheel:
    needs: build-wheel
    runs-on: ubuntu-latest
    env:
      PYPROJECT_NAME: ${{ inputs.python-package }}
      EXPECTED_VERSION: ${{ needs.build-wheel.outputs.expected-version }}
    steps:
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: pip-wheel-${{ github.run_id }}
          path: dist/${{ github.run_id }}/

      - name: Setup Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ inputs.python-version }}"

      - name: Install wheel
        run: |
          cd dist/${{ github.run_id }}/

          ls -al 

          pip install *.whl

          cmd=$(cat <<EOF
          import $PYPROJECT_NAME

          with open("version.txt", "w") as fh:
            fh.write($PYPROJECT_NAME.__version__)
          EOF
          )

          python -c "$cmd"

          INSTALLED_VERSION=$(cat version.txt)

          if [[ "$INSTALLED_VERSION" != "$EXPECTED_VERSION" ]]; then
            echo 'Wheel has an outdated version, mission abort immediately!'
            exit 1
          fi

  publish-wheel:
    needs: test-wheel
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.dry-run && 'public' || 'main' }}
    steps:
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: pip-wheel-${{ github.run_id }}
          path: dist/

      - name: Release wheel
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          REPOSITORY: ${{ inputs.dry-run && 'testpypi' || 'pypi' }}
        run: |
          python3 -m pip install --upgrade twine==6.0.1
          python3 -m twine upload -u $TWINE_USERNAME -p $TWINE_PASSWORD --repository $REPOSITORY dist/*

  notify:
    runs-on: ubuntu-latest
    if: failure()
    environment: public
    needs: [publish-wheel]
    env:
      RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      SLACK_WEBHOOK_ADMIN: "<!subteam^${{ secrets.SLACK_WEBHOOK_ADMIN }}>"
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      COMMIT_URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
      COMMIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: NVIDIA/NeMo-FW-CI-templates
          ref: v0.17.0
          path: send-slack-alert

      - name: Send Slack alert
        uses: ./send-slack-alert/.github/actions/send-slack-alert
        with:
          message: >
            <${{ env.RUN_URL }}|Build, test, and push PyPi wheel (test)> has failed for <${{ env.COMMIT_URL }}|${{ env.COMMIT_SHA }}>.
            
            cc: ${{ env.SLACK_WEBHOOK_ADMIN }}


          webhook: ${{ env.SLACK_WEBHOOK }}

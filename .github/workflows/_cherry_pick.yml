# Copyright (c) 2020-2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Cherry pick
on:
  workflow_call:
    secrets:
      PAT:
        required: true
      SLACK_WEBHOOK_ADMIN:
        required: true
      SLACK_WEBHOOK:
        required: true

defaults:
  run:
    shell: bash -x -e -u -o pipefail {0}

jobs:
  main:
    runs-on: ubuntu-latest
    environment:
      name: main
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Cherry pick
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          SLACK_WEBHOOK_ADMIN: "<!subteam^${{ secrets.SLACK_WEBHOOK_ADMIN }}>"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          REPOSITORY: ${{ github.repository }}
        run: |
          set -x  
          set +e

          git config --global user.email "nemo-bot@nvidia.com"
          git config --global user.name "NeMo Bot"

          SHA=$(git rev-list --no-merges -n 1 HEAD)
          MESSAGE=$(git log -n 1 --pretty=format:%s $SHA)
          PR_ID=$(echo $MESSAGE | awk -F'#' '{print $2}' | awk -F')' '{print $1}' )
          USERNAME=$(git log -n 1 --pretty=format:%ae $SHA | awk -F'@' '{print $1}')

          PR=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$REPOSITORY/pulls/$PR_ID)
          PR_TITLE=$(echo -E $PR | jq '.title' | tr -d '"')

          LABELS=$(echo -E $PR | jq '.labels | [.[].name] | join(",")' | tr -d '"')
          AUTHOR=$(echo -E $PR | jq '.user.login' | tr -d '"')

          TARGET_BRANCHES=$(echo "$LABELS" | egrep -o 'r[0-9]+\.[0-9]+\.[0-9]+')

          if [[ $TARGET_BRANCHES == '' ]]; then
            echo Nothing to cherry-pick
            exit 0
          fi

          echo $TARGET_BRANCHES | while read -r RELEASE_BRANCH ; do
            TARGET_BRANCH_EXISTS_OK=$([[ "$(git ls-remote --heads origin refs/heads/$RELEASE_BRANCH)" != "" ]] && echo true || echo false)

            if [[ "$TARGET_BRANCH_EXISTS_OK" == "false" ]]; then
              echo Release branch does not yet exist, will not  cherry-pick
              continue
            fi
            
            (
              git fetch origin $RELEASE_BRANCH:$RELEASE_BRANCH
              git switch --force-create cherry-pick-$PR_ID-$RELEASE_BRANCH $RELEASE_BRANCH
              git cherry-pick $SHA
              git push -u origin --force cherry-pick-$PR_ID-$RELEASE_BRANCH
              git checkout ${CI_DEFAULT_BRANCH:-main}
            )

            CHERRYPICK_SUCCESSFUL=$?

            if [[ $CHERRYPICK_SUCCESSFUL -eq 0 ]]; then
              PR_URL="https://github.com/$REPOSITORY/pull/$PR_ID"

              MESSAGE="Hi @$AUTHOR ðŸ‘‹,
              
              we've cherry picked #$PR_ID into `$RELEASE_BRANCH` for you! ðŸš€
              
              Please review and approve this cherry pick by your convenience!"

              PAYLOAD=$(jq \
                -n \
                -c \
                --arg TITLE "Cherry pick \`$PR_TITLE ($PR_ID)\` into \`$RELEASE_BRANCH\`" \
                --arg HEAD "cherry-pick-$PR_ID-$RELEASE_BRANCH" \
                --arg RELEASE_BRANCH "$RELEASE_BRANCH" \
                --arg BODY "beep boop [ðŸ¤–]: $MESSAGE" \
                '{
                  "title": $TITLE,
                  "head": $HEAD,
                  "base": $RELEASE_BRANCH,
                  "body": $BODY
                }'
              )

              NEW_PR=$(curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$REPOSITORY/pulls \
                -d "$PAYLOAD")
                
              NEW_PR_ID=$(echo -E $NEW_PR | jq '.number')
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$REPOSITORY/pulls/$NEW_PR_ID/requested_reviewers \
                -d '{"reviewers":["'$AUTHOR'"]}'
              
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$REPOSITORY/issues/$NEW_PR_ID/labels \
                -d '{"labels":["Run CICD", "cherry-pick"]}'

            else
              URL="https://github.com/$REPOSITORY/pull/$PR_ID"

              MESSAGE="Hey <@$USERNAME>: Cherry-pick of <$URL|#$PR_ID> failed (3-way merge impossible). 
              
              Please resolve manually and create a PR.
              
              cc: $SLACK_WEBHOOK_ADMIN"

              MESSAGE=$(jq -cn --arg message "beep boop ðŸ¤–: $MESSAGE" '{
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": $message
                    }
                  }
                ]
              }')

              curl -X POST -H "Content-type: application/json" --data "$MESSAGE" $SLACK_WEBHOOK 

            fi

          done

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Copyright (c) 2020-2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: "Code freeze"

on:
  workflow_call:
    inputs:
      library-name:
        type: string
        description: Name of Nemo library
      python-package:
        type: string
        description: Name of Python package
      release-type:
        type: string
        description: Type of release (major|minor)
      freeze-commit:
        type: string
        description: Commit SHA to use for cut-off
      dry-run:
        type: boolean
        description: Dry-run code-freeze
        default: true
    secrets:
      SLACK_RELEASE_ENDPOINT:
        required: true
      SLACK_WEBHOOK_ADMIN:
        required: true
    outputs:
      release-branch:
        description: "Released version (same as its branch name)"
        value: ${{ jobs.create-release-branch.outputs.version }}

defaults:
  run:
    shell: bash -x -e -u -o pipefail {0}

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release-branch.outputs.version }}
    env:
      DRY_RUN: ${{ inputs.dry-run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.run_id }}
          fetch-depth: 0
          ref: ${{ inputs.freeze-commit }}

      - name: Get release branch ref
        id: release-branch
        run: |
          cd ${{ github.run_id }}
                    
          sed -i "/^PRE_RELEASE/c\PRE_RELEASE = ''" ${{ inputs.python-package }}/package_info.py
          sed -i "/^DEV/c\DEV = ''" ${{ inputs.python-package }}/package_info.py

          pushd ${{ inputs.python-package }}

          VERSION=$(python -c 'import package_info; print(package_info.__version__)')
          echo "version=r$VERSION" | tee -a "$GITHUB_OUTPUT"

          git switch --force-create r$VERSION origin/main

          if [[ "$DRY_RUN" != "true" ]]; then
            git push -u origin r$VERSION --force
          fi

  bump-next-version:
    runs-on: ubuntu-latest
    needs: [create-release-branch]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.run_id }}
          fetch-depth: 0
          fetch-tags: true
          ref: main

      - name: Bump version
        id: bump-version
        run: |
          cd ${{ github.run_id }}
          MAJOR=$(cat ${{ inputs.python-package }}/package_info.py | awk '/^MAJOR = /' | awk -F"= " '{print $2}')
          MINOR=$(cat ${{ inputs.python-package }}/package_info.py | awk '/^MINOR = /' | awk -F"= " '{print $2}')

          if [[ "${{ inputs.release-type }}" == "major" ]]; then
            NEXT_MAJOR=$(( MAJOR + 1))
            NEXT_MINOR=0
          else
            NEXT_MAJOR=$MAJOR
            NEXT_MINOR=$(( MINOR + 1))
          fi

          NEXT_PATCH=0
          NEXT_PRERELEASE=rc0
          NEXT_DEV=dev0

          sed -i "/^MAJOR/c\MAJOR = $NEXT_MAJOR" ${{ inputs.python-package }}/package_info.py
          sed -i "/^MINOR/c\MINOR = $NEXT_MINOR" ${{ inputs.python-package }}/package_info.py
          sed -i "/^PATCH/c\PATCH = $NEXT_PATCH" ${{ inputs.python-package }}/package_info.py
          sed -i "/^PRE_RELEASE/c\PRE_RELEASE = '$NEXT_PRERELEASE'" ${{ inputs.python-package }}/package_info.py
          sed -i "/^DEV/c\DEV = '$NEXT_DEV'" ${{ inputs.python-package }}/package_info.py

          echo "version=$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH$NEXT_PRERELEASE.$NEXT_DEV" | tee -a "$GITHUB_OUTPUT"

      - name: Create Version Bump PR
        uses: peter-evans/create-pull-request@v6
        id: create-pull-request
        if: ${{ inputs.dry-run != true }}
        with:
          path: ${{ github.run_id }}
          branch: ci/bump-${{ steps.bump-version.outputs.version }}
          title: "Version bump to `${{ steps.bump-version.outputs.version }}`"
          body: |
            ðŸš€ Version bump ${{ inputs.library-name }} to `${{ steps.bump-version.outputs.version }}`
          commit-message: "[ðŸ¤–]: Howdy folks, let's bump ${{ inputs.library-name }} to `${{ steps.bump-version.outputs.version }}` !"
          signoff: true
          assignees: okoenig

  notify:
    runs-on: ubuntu-latest
    needs: [create-release-branch, bump-next-version]
    environment: main
    if: ${{ inputs.dry-run != true }}
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_RELEASE_ENDPOINT }}
      RELEASE_BRANCH: ${{ needs.create-release-branch.outputs.version }}
      SLACK_WEBHOOK_ADMIN: "<!subteam^${{ secrets.SLACK_WEBHOOK_ADMIN }}>"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: NVIDIA/NeMo-FW-CI-templates
          ref: v0.17.0
          path: send-slack-alert

      - name: Send Slack alert
        uses: ./send-slack-alert/.github/actions/send-slack-alert
        with:
          message: >
            We have frozen release branch `${{ env.RELEASE_BRANCH }}` of `${{ inputs.library-name }}` ðŸš€âœ¨ðŸŽ‰
            
            PSA: For automated cherry picks, please assign the label `${{ env.RELEASE_BRANCH }}` to your PR _before_ merging to `main`. A bot will attempt a cherry pick into the release branch. If it fails due to a merge-conflict, you will need to take action. Our team ${{ env.SLACK_WEBHOOK_ADMIN }} will reach out to you.


          webhook: ${{ env.SLACK_WEBHOOK }}

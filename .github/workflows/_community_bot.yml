name: Community Bot

on:
  workflow_call:
    inputs:
      environment:
        required: false
        description: The environment to use for the workflow
        type: string
        default: "main"
      community_project_id:
        required: true
        description: The GitHub project ID to add community issues to
        type: string
      issue_number:
        required: false
        description: The issue number to test with
        type: string
      issue_author:
        required: false
        description: The issue author to test with
        type: string
    secrets:
      GH_TOKEN:
        required: true

jobs:
  manage-community-label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    environment: ${{ inputs.environment }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_NUMBER: ${{ github.event_name == 'push' && inputs.issue_number || github.event.issue.number }}
      COMMUNITY_PROJECT_ID: ${{ inputs.community_project_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Check pre-conditions
        id: pre-flight
        env:
          IS_VALID_EVENT: ${{ github.event_name == 'issues' || github.event_name == 'issue_comment' }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          ISSUE_AUTHOR: ${{ github.event_name == 'push' && inputs.issue_author || github.event.issue.user.login }}
          REPO: ${{ github.repository }}
        run: |
          # Get the username who triggered the action
          USERNAME="${{ github.actor }}"

          # For manual testing, always treat as community user
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Manual test mode - treating as community user"
            echo "is_maintainer=false" | tee -a $GITHUB_OUTPUT
            echo "is_valid_event=true" | tee -a $GITHUB_OUTPUT
            echo "username=$USERNAME" | tee -a $GITHUB_OUTPUT
            exit 0
          fi

          echo "Checking if $ISSUE_AUTHOR is a repo collaborator..."
          API_URL="https://api.github.com/repos/$REPO/collaborators/$ISSUE_AUTHOR"
          REPO_MEMBERSHIP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $API_URL)

          echo "Checking if $ISSUE_AUTHOR is an org collaborator to NVIDIA-NeMo..."
          API_URL="https://api.github.com/orgs/NVIDIA-NeMo/members/$ISSUE_AUTHOR"
          ORG_NVIDIA_NEMO_MEMBERSHIP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $API_URL)

          echo "Checking if $ISSUE_AUTHOR is an org collaborator to NVIDIA..."
          API_URL="https://api.github.com/orgs/NVIDIA/members/$ISSUE_AUTHOR"
          ORG_NVIDIA_MEMBERSHIP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $API_URL)

          if [ "$REPO_MEMBERSHIP_RESPONSE" -eq 204 ] || [ "$ORG_NVIDIA_NEMO_MEMBERSHIP_RESPONSE" -eq 204 ] || [ "$ORG_NVIDIA_MEMBERSHIP_RESPONSE" -eq 204 ]; then
            echo "is_maintainer=true" | tee -a $GITHUB_OUTPUT
          else
            echo "is_maintainer=false" | tee -a $GITHUB_OUTPUT
          fi

          echo "is_valid_event=$IS_VALID_EVENT" | tee -a $GITHUB_OUTPUT

          echo "username=$USERNAME" | tee -a $GITHUB_OUTPUT

      - name: Add community-request label for community users
        if: |
          (
            steps.pre-flight.outputs.is_maintainer == 'false'
            && steps.pre-flight.outputs.is_valid_event == 'true'
          )
        run: |
          # Add the community-request label
          gh issue edit $ISSUE_NUMBER --add-label "community-request"

      - name: Add community issue to community project
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        if: |
          (
            steps.pre-flight.outputs.is_maintainer == 'false'
            && steps.pre-flight.outputs.is_valid_event == 'true'
          )
        run: |
          ISSUE_NODE_ID=$(gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER --jq .node_id)
          PROJECT_NODE_ID=$(gh api graphql -f query='
            query($projectNumber: Int!) {
              organization(login: "NVIDIA-NeMo") {
                projectV2(number: $projectNumber) {
                  id
                }
              }
            }' -F projectNumber="$COMMUNITY_PROJECT_ID" --jq .data.organization.projectV2.id)

          echo "Project ID: $PROJECT_NODE_ID"
          echo "Adding issue $ISSUE_NUMBER to project $COMMUNITY_PROJECT_ID"

          RESPONSE=$(gh api graphql -f query='
              mutation($project:ID!, $issue:ID!) {
                  addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                  item {
                      id
                  }
                  }
              }' -f project="$PROJECT_NODE_ID" -f issue="$ISSUE_NODE_ID")

          echo $RESPONSE

          if echo "$RESPONSE" | grep -q "error"; then
            exit 1
          fi

      - name: Remove community-request label for maintainers
        if: |
          (
            steps.pre-flight.outputs.is_maintainer == 'true'
            && steps.pre-flight.outputs.is_valid_event == 'true'
          )
        run: |
          # Check if the issue has the "community-request" label before attempting to remove it
          LABELS=$(gh issue view "$ISSUE_NUMBER" --json labels -q '.labels[].name')
          if echo "$LABELS" | grep -q "^community-request$"; then
            gh issue edit "$ISSUE_NUMBER" --remove-label "community-request"
          else
            echo "Label 'community-request' not present on issue #$ISSUE_NUMBER, skipping removal."
          fi

      - name: Log action taken
        run: |
          echo "User: ${{ steps.pre-flight.outputs.username }}"
          echo "Is maintainer: ${{ steps.pre-flight.outputs.is_maintainer }}"
          echo "Event: ${{ github.event_name }}"
          echo "Issue number: $ISSUE_NUMBER"

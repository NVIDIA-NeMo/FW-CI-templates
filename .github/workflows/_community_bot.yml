name: Community Bot

on:
  workflow_call:
    inputs:
      environment:
        required: false
        description: The environment to use for the workflow
        type: string
        default: "main"
      community_project_id:
        required: true
        description: The GitHub project ID to add community issues to
        type: string
      issue_number:
        required: false
        description: The issue number to test with
        type: string
      issue_author:
        required: false
        description: The issue author to test with
        type: string
    secrets:
      GH_TOKEN:
        required: true

jobs:
  manage-community-label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    environment: ${{ inputs.environment }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Handle both manual dispatch and workflow call
      ISSUE_NUMBER: ${{ github.event_name == 'push' && inputs.issue_number || github.event.issue.number }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Check pre-conditions
        id: pre-flight
        env:
          IS_VALID_EVENT: ${{ (github.event_name == 'issues' || github.event_name == 'issue_comment' }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          ISSUE_AUTHOR: ${{ github.event_name == 'push' && inputs.issue_author || github.event.issue.user.login }}
          REPO: ${{ github.repository }}
        run: |
          # Get the username who triggered the action
          USERNAME="${{ github.actor }}"

          # For manual testing, always treat as community user
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Manual test mode - treating as community user"
            echo "is_maintainer=false" | tee -a $GITHUB_OUTPUT
            echo "is_valid_event=true" | tee -a $GITHUB_OUTPUT
            echo "username=$USERNAME" | tee -a $GITHUB_OUTPUT
            exit 0
          fi

          echo "Checking if $ISSUE_AUTHOR is a collaborator..."
          API_URL="https://api.github.com/repos/$REPO/collaborators/$ISSUE_AUTHOR"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $API_URL)

          if [ "$STATUS" -eq 204 ]; then
            echo "is_maintainer=true" | tee -a $GITHUB_OUTPUT
          elif [ "$STATUS" -eq 404 ]; then
            echo "is_maintainer=false" | tee -a $GITHUB_OUTPUT
          else
            echo "Unexpected response: $STATUS"
            exit 1
          fi

          echo "is_valid_event=$IS_VALID_EVENT" | tee -a $GITHUB_OUTPUT

          echo "username=$USERNAME" | tee -a $GITHUB_OUTPUT

      - name: Add community-request label for community users
        if: |
          (
            steps.pre-flight.outputs.is_maintainer == 'false'
            && steps.pre-flight.outputs.is_valid_event == 'true'
          )
        run: |
          # Add the community-request label
          gh issue edit $ISSUE_NUMBER --add-label "community-request"

      - name: Add community issue to community project
        if: |
          (
            steps.pre-flight.outputs.is_maintainer == 'false'
            && steps.pre-flight.outputs.is_valid_event == 'true'
          )
        run: |
          # Get the issue's node ID
          ISSUE_NODE_ID=$(gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER --jq .node_id)

          echo "Adding issue #$ISSUE_NUMBER to project ${{ inputs.community_project_id }}"
          RESPONSE=$(gh api graphql -f query='
            mutation {
              addProjectV2Item(input: {
                projectId: "'${{ inputs.community_project_id }}'"
                contentId: "'$ISSUE_NODE_ID'"
              }) {
                item {
                  id
                }
              }
            }
          ' 2>&1)

          EXIT_CODE=$?

          if [ $EXIT_CODE -eq 0 ]; then
            echo "Successfully added issue to project"
          else
            # Check for specific error types
            if echo "$RESPONSE" | grep -q "already exists"; then
              echo "Issue #$ISSUE_NUMBER is already in project ${{ inputs.community_project_id }}, skipping"
            else
              echo "ERROR: Unexpected error adding issue to project:"
              echo "$RESPONSE"
              exit 1
            fi
          fi

      - name: Remove community-request label for maintainers
        if: |
          (
            steps.pre-flight.outputs.is_maintainer == 'true'
            && steps.pre-flight.outputs.is_valid_event == 'true'
          )
        run: |
          # Check if the issue has the "community-request" label before attempting to remove it
          LABELS=$(gh issue view "$ISSUE_NUMBER" --json labels -q '.labels[].name')
          if echo "$LABELS" | grep -q "^community-request$"; then
            gh issue edit "$ISSUE_NUMBER" --remove-label "community-request"
          else
            echo "Label 'community-request' not present on issue #$ISSUE_NUMBER, skipping removal."
          fi

      - name: Log action taken
        run: |
          echo "User: ${{ steps.pre-flight.outputs.username }}"
          echo "Is maintainer: ${{ steps.pre-flight.outputs.is_maintainer }}"
          echo "Event: ${{ github.event_name }}"
          echo "Issue number: $ISSUE_NUMBER"

# Copyright (c) 2020-2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Release"

defaults:
  run:
    shell: bash -x -e -u -o pipefail {0}

on:
  workflow_call:
    inputs:
      release-ref:
        required: true
        description: Ref (SHA or branch) to release
        type: string
      python-package:
        type: string
        description: Name of Python package
      python-version:
        type: string
        description: Python version to use for build
        required: false
        default: "3.10"
      library-name:
        type: string
        description: Name of Nemo library
      dry-run:
        type: boolean
        required: true
        description: Do not publish a wheel and GitHub release.
      version-bump-branch:
        type: string
        required: true
        description: Branch to target for version bump
      packaging:
        required: false
        description: "Packaging tool (supported: setuptools, hatch, uv)"
        type: string
        default: setuptools
      create-gh-release:
        required: false
        description: Create a GitHub release
        type: boolean
        default: true
      has-src-dir:
        required: false
        description: Whether the package has a src directory
        type: boolean
        default: false
      skip-test-wheel:
        required: false
        description: Skip the test wheel step
        type: boolean
        default: false
      custom-container:
        required: false
        description: Custom container to use for the build
        type: string
        default: ""
      runner:
        required: false
        description: Runner to use for the build
        type: string
        default: ubuntu-latest
      no-build-isolation:
        required: false
        description: Do not build the package in isolation
        type: boolean
        default: false
    secrets:
      TWINE_USERNAME:
        required: true
      TWINE_PASSWORD:
        required: true
      SLACK_WEBHOOK_ADMIN:
        required: true
      SLACK_WEBHOOK:
        required: true
      PAT:
        required: true

jobs:
  build-test-publish-wheel:
    uses: NVIDIA-NeMo/FW-CI-templates/.github/workflows/_build_test_publish_wheel.yml@v0.46.0
    with:
      dry-run: ${{ inputs.dry-run }}
      python-package: ${{ inputs.python-package }}
      python-version: ${{ inputs.python-version }}
      ref: ${{ inputs.release-ref }}
      packaging: ${{ inputs.packaging }}
      has-src-dir: ${{ inputs.has-src-dir }}
      skip-test-wheel: ${{ inputs.skip-test-wheel }}
      custom-container: ${{ inputs.custom-container }}
      runner: ${{ inputs.runner }}
      no-build-isolation: ${{ inputs.no-build-isolation }}
    secrets:
      TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      SLACK_WEBHOOK_ADMIN: ${{ secrets.SLACK_WEBHOOK_ADMIN }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  create-gh-release:
    needs: [build-test-publish-wheel]
    runs-on: ubuntu-latest
    environment: ${{ inputs.dry-run == true && 'public' || 'main' }}
    if: ${{ inputs.create-gh-release == true }}
    outputs:
      is-prerelease: ${{ steps.version-number.outputs.is-prerelease }}
    env:
      REPOSITORY: ${{ github.repository }}
      PROJECT_NAME: ${{ inputs.library-name }}
      VERSION: ${{ needs.build-test-publish-wheel.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.run_id }}
          ref: ${{ inputs.release-ref }}
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: Create release
        id: version-number
        env:
          SHA: ${{ inputs.release-ref }}
          GH_TOKEN: ${{ secrets.PAT }}
          IS_DRY_RUN: ${{ inputs.dry-run }}
        run: |
          cd ${{ github.run_id }}

          IS_PRERELEASE=$([[ "$VERSION" == *rc* ]] && echo "true" || echo "false")
          NAME="NVIDIA $PROJECT_NAME ${VERSION}"

          if [[ "$IS_PRERELEASE" == "true" ]]; then
            DATE=$(date +"%Y-%m-%d")
            CHANGELOG="Prerelease: $NAME ($DATE)"
          else
            CHANGELOG=$(awk '/^## '"$NAME"'/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md)
            CHANGELOG=$(echo "$CHANGELOG" | sed '/./,$!d' | sed ':a;N;$!ba;s/\n$//')
          fi

          echo "is-prerelease=$IS_PRERELEASE" | tee -a "$GITHUB_OUTPUT"

          PAYLOAD=$(jq -nc \
                      --arg TAG_NAME "v${VERSION}" \
                      --arg CI_COMMIT_BRANCH "$SHA" \
                      --arg NAME "$NAME" \
                      --arg BODY "$CHANGELOG" \
                      --argjson PRERELEASE "$IS_PRERELEASE" \
                      '{
                        "tag_name": $TAG_NAME,
                        "target_commitish": $CI_COMMIT_BRANCH,
                        "name": $NAME,
                        "body": $BODY,
                        "draft": false,
                        "prerelease": $PRERELEASE,
                        "generate_release_notes": false
                      }'
                  )
          echo -E "$PAYLOAD" > payload.txt

          CMD=$(echo -E 'curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer '"$GH_TOKEN"'" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/'"$REPOSITORY"'/releases \
            -d @payload.txt
          ')

          if [[ "$IS_DRY_RUN" == "true" ]]; then
            echo -E "$CMD"
          else
            eval "$CMD"
          fi

  bump-next-version:
    runs-on: ubuntu-latest
    needs: [build-test-publish-wheel, create-gh-release]
    if: ${{ needs.create-gh-release.outputs.is-prerelease == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.run_id }}
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ inputs.release-ref }}

      - name: Bump version
        id: bump-version
        run: |
          cd ${{ github.run_id }}
          MAJOR=$(cat ${{ inputs.python-package }}/package_info.py | awk '/^MAJOR = /' | awk -F"= " '{print $2}')
          MINOR=$(cat ${{ inputs.python-package }}/package_info.py | awk '/^MINOR = /' | awk -F"= " '{print $2}')
          PATCH=$(cat ${{ inputs.python-package }}/package_info.py | awk '/^PATCH = /' | awk -F"= " '{print $2}')
          PRERELEASE=$(cat ${{ inputs.python-package }}/package_info.py | awk '/^PRE_RELEASE = /' | awk -F"= " '{print $2}' | tr -d '"' | tr -d "'")

          NEXT_PRERELEASE=rc$((${PRERELEASE#rc} + 1))
          NEXT_DEV=dev0

          sed -i "/^PRE_RELEASE/c\PRE_RELEASE = '$NEXT_PRERELEASE'" ${{ inputs.python-package }}/package_info.py
          sed -i "/^DEV/c\DEV = '$NEXT_DEV'" ${{ inputs.python-package }}/package_info.py

          echo "version=$MAJOR.$MINOR.$PATCH$NEXT_PRERELEASE.$NEXT_DEV" | tee -a "$GITHUB_OUTPUT"

      - name: Create Version Bump PR
        uses: peter-evans/create-pull-request@v6
        id: create-pull-request
        if: ${{ inputs.dry-run != true }}
        with:
          path: ${{ github.run_id }}
          branch: ci/bump-${{ steps.bump-version.outputs.version }}
          title: "Version bump to `${{ steps.bump-version.outputs.version }}`"
          body: |
            ðŸš€ Version bump ${{ inputs.library_name }} to `${{ steps.bump-version.outputs.version }}`
          commit-message: "[ðŸ¤–]: Howdy folks, let's bump ${{ inputs.library_name }} to `${{ steps.bump-version.outputs.version }}` !"
          signoff: true
          assignees: okoenig
          base: ${{ inputs.version-bump-branch }}

  notify:
    needs: [build-test-publish-wheel, create-gh-release]
    runs-on: ubuntu-latest
    environment: ${{ inputs.dry-run == true && 'public' || 'main' }}
    env:
      GH_URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build-test-publish-wheel.outputs.version }}
      PYPI_URL: https://${{ inputs.dry-run == true && 'test.' || '' }}pypi.org/project/${{ needs.build-test-publish-wheel.outputs.pypi-name }}/${{ needs.build-test-publish-wheel.outputs.version }}/
      PROJECT_NAME: ${{ inputs.library-name }}
      VERSION: ${{ needs.build-test-publish-wheel.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: NVIDIA-NeMo/FW-CI-templates
          ref: v0.17.0
          path: send-slack-alert

      - name: Send Slack alert
        uses: ./send-slack-alert/.github/actions/send-slack-alert
        env:
          MESSAGE: |
            ${{ inputs.dry-run == true && 'This is a dry-run, nothing actually happened: ' || '' }}We have released `${{ env.VERSION }}` of `NVIDIA ${{ env.PROJECT_NAME }}` ðŸš€âœ¨ðŸŽ‰

            â€¢ <${{ env.GH_URL }}|GitHub release>
            â€¢ <${{ env.PYPI_URL }}|PyPi release>

        with:
          message: ${{ env.MESSAGE }}
          webhook: ${{ secrets.SLACK_WEBHOOK }}

# Copyright (c) {{cookiecutter.year}}, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: CICD NeMo
on:
  schedule:
    - cron: 0 0 * * *
  push:
    branches:
      - main
      - "pull-request/[0-9]+"

concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.event.label.name || 'main' }}-${{ github.event_name }}{% endraw % }
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:

  cicd-wait-in-queue:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Running CI tests
        run: |
          echo "Running CI tests"

  cicd-container-build:
    uses: ./.github/workflows/_build_container.yml
    needs: cicd-wait-in-queue
    with:
      image-name: {{cookiecutter.package_name}}
      dockerfile: docker/Dockerfile.ci
    secrets:
      AZURE_CLIENT_ID: {% raw %}${{ secrets.AZURE_CLIENT_ID }}{% endraw %}
      AZURE_TENANT_ID: {% raw %}${{ secrets.AZURE_TENANT_ID }}{% endraw %}
      AZURE_SUBSCRIPTION_ID: {% raw %}${{ secrets.AZURE_SUBSCRIPTION_ID }}{% endraw %}

  cicd-unit-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - script: L0_Unit_Tests_GPU
            runner: linux-amd64-gpu-rtxa6000-latest-2-nemo
            timeout: 30
          - script: L0_Unit_Tests_CPU
            runner: linux-amd64-cpu16
            cpu-only: true
    needs: [cicd-container-build]
    runs-on: {% raw %}${{ matrix.runner }}{% endraw %}
    name: {% raw %}${{ matrix.script }}{% endraw %}
    environment: nemo-ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: main
        uses: ./.github/actions/test-template
        with:
          runner: {% raw %}${{ runner.name }}{% endraw %}
          script: {% raw %}${{ matrix.script }}{% endraw %}
          timeout: {% raw %}${{ matrix.timeout || 10 }}{% endraw %}
          is_unit_test: "true"
          image: {{cookiecutter.package_name}}
          cpu-only: {% raw %}${{ matrix.cpu-only || false }}{% endraw %}
          has-azure-credentials: "true"
          azure-client-id: {% raw %}${{ secrets.AZURE_CLIENT_ID }}{% endraw %}
          azure-tenant-id: {% raw %}${{ secrets.AZURE_TENANT_ID }}{% endraw %}
          azure-subscription-id: {% raw %}${{ secrets.AZURE_SUBSCRIPTION_ID }}{% endraw %}

  cicd-e2e-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - script: L0_Unit_Tests_GPU
            runner: linux-amd64-gpu-rtxa6000-latest-2-nemo
            timeout: 30
          - script: L0_Unit_Tests_CPU
            runner: linux-amd64-cpu16
            cpu-only: true
    needs: [cicd-unit-tests]
    runs-on: {% raw %}${{ matrix.runner }}{% endraw %}
    name: {% raw %}${{ matrix.is_optional && 'PLEASEFIXME_' || '' }}${{ matrix.script }}{% endraw %}
    environment: nemo-ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: main
        uses: ./.github/actions/test-template
        with:
          runner: {% raw %}${{ runner.name }}{% endraw %}
          script: {% raw %}${{ matrix.script }}{% endraw %}
          timeout: {% raw %}${{ matrix.timeout || 10 }}{% endraw %}
          is_unit_test: "true"
          image: {{cookiecutter.package_name}}
          cpu-only: {% raw %}${{ matrix.cpu-only || false }}{% endraw %}
          has-azure-credentials: "true"
          azure-client-id: {% raw %}${{ secrets.AZURE_CLIENT_ID }}{% endraw %}
          azure-tenant-id: {% raw %}${{ secrets.AZURE_TENANT_ID }}{% endraw %}
          azure-subscription-id: {% raw %}${{ secrets.AZURE_SUBSCRIPTION_ID }}{% endraw %}

  Nemo_CICD_Test:
    needs:
      - cicd-container-build
      - cicd-unit-tests
      - cicd-e2e-tests
    if: always()
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get workflow result
        id: result
        env:
          GH_TOKEN: {% raw %}${{ github.token }}{% endraw %}
          RUN_ID: {% raw %}${{ github.run_id }}{% endraw %}
        run: |
          # Get workflow run details and check job conclusions
          LATEST_ATTEMPT=$(gh run view $RUN_ID --json jobs -q '[.jobs[] | select(.conclusion != null) | .conclusion] | last')
          NUM_FAILED=$(gh run view $RUN_ID --json jobs -q '[.jobs[] | select(.conclusion == "failure") | .name] | length')
          NUM_CANCELLED=$(gh run view $RUN_ID --json jobs -q '[.jobs[] | select(.conclusion == "cancelled") | .name] | length')

          if [[ $NUM_FAILED -eq 0 && $NUM_CANCELLED -eq 0 ]]; then
            RESULT="success"
          elif [[ $NUM_CANCELLED -gt 0 ]]; then
            RESULT="cancelled"
          else
            RESULT="failure"
          fi

          # Output the final status
          echo "code=$RESULT" | tee -a $GITHUB_OUTPUT

      - name: Checkout for GH CLI
        uses: actions/checkout@v4

      - name: Remove label if not cancelled
        if: |
          steps.result.outputs.code != 'cancelled'
          && github.event.label.name == 'Run CICD'
          && github.event.pull_request.head.repo.full_name == github.repository
        env:
          GH_TOKEN: {% raw %}${{ github.token }}{% endraw %}
          PR_NUMBER: {% raw %}${{ github.event.number }}{% endraw %}
        run: gh pr edit "$PR_NUMBER" --remove-label "Run CICD"

      - name: Pipeline successful, add PR comment
        if: |
          steps.result.outputs.code == 'success'
          && github.event_name == 'pull_request'
          && env.SLACK_WEBHOOK != ''
        uses: peter-evans/create-or-update-comment@v4
        env:
          SLACK_WEBHOOK: {% raw %}${{ secrets.SLACK_WEBHOOK }}{% endraw %}
          REPOSITORY: {% raw %}${{ github.repository }}{% endraw %}
          RUN_ID: {% raw %}${{ github.run_id }}{% endraw %}
        with:
          issue-number: {% raw %}${{ github.event.number }}{% endraw %}
          body: |
            [ðŸ¤–]: Hi @{% raw %}${{ github.event.pull_request.user.login }}{% endraw %} ðŸ‘‹,

            We wanted to let you know that a [CICD pipeline](https://github.com/{% raw %}${{ env.REPOSITORY }}{% endraw %}/actions/runs/{% raw %}${{ env.RUN_ID }}{% endraw %}) for this PR just finished successfully.

            So it might be time to merge this PR or get some approvals.

            //cc @chtruong814 @ko3n1g @pablo-garay @thomasdhc

      - name: "Pipeline not successful and not cancelled: Send Slack alert & create step summary"
        if: |
          steps.result.outputs.code == 'failure'
          && github.event.label.name == 'Run CICD'
          && env.SLACK_WEBHOOK != ''
        env:
          SLACK_WEBHOOK: {% raw %}${{ secrets.SLACK_WEBHOOK }}{% endraw %}
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          REPOSITORY: {% raw %}${{ github.repository }}{% endraw %}
          RUN_ID: {% raw %}${{ github.run_id }}{% endraw %}
          PR_NUMBER: {% raw %}${{ github.event.number }}{% endraw %}
          SERVER_URL: {% raw %}${{ github.server_url }}{% endraw %}
        run: |
          set -x
          pip install PyGithub
          export BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}

          python .github/scripts/notify.py

      - name: Exit
        if: {% raw %}${{ always() }}{% endraw %}
        env:
          RESULT: {% raw %}${{ steps.result.outputs.code }}{% endraw %}
        run: |
          if [ $RESULT == "success" ]; then
            exit 0
          else
            exit 1
          fi

  Coverage:
    runs-on: ubuntu-latest
    needs: [pre-flight, Nemo_CICD_Test]
    strategy:
      matrix:
        flag: [unit-test, e2e]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage reports of current branch
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-{% raw %}${{ matrix.flag }}{% endraw %}-*

      - name: Get total coverage of current branch
        shell: bash -x -e -u -o pipefail {0}
        if: always()
        run: |
          pip install coverage

          ls -al .
          ls -al coverage-*/
          coverage combine --keep $(ls coverage-*/.coverage)
          coverage report -i
          rm -rf coverage-*
          ls -al

      # Disabled for new repos initially
      # - name: Upload coverage reports to Codecov
      #   uses: codecov/codecov-action@v5
      #   with:
      #     token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
      #     verbose: true
      #     flags: {% raw %}${{ matrix.flag }}{% endraw %}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-{% raw %}${{ matrix.flag }}{% endraw %}-aggregated
          path: |
            .coverage
          include-hidden-files: true
